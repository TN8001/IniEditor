<?xml version="1.0"?>
<SyntaxDefinition name="INI" extensions=".ini" xmlns="http://icsharpcode.net/sharpdevelop/syntaxdefinition/2008">
  <Color name="Comment" foreground="Green" />
  <Color name="Bracket" foreground="Black" />
  <Color name="Section" foreground="Blue" fontWeight="bold" />
  <Color name="Key" foreground="Firebrick" />
  <Color name="Equal" foreground="SteelBlue" />
  <Color name="TrueFalse" foreground="DarkCyan" />
  <Color name="NumberLiteral" foreground="DarkBlue" />
  <Color name="Error" foreground="Red" />

  <RuleSet>
    <!-- コメント行 -->
    <Span begin="^;" color="Comment" />


    <!-- セクション行 -->
    <!-- ベースをエラーにして正しい部分だけ色を付ける
         '='が含まれていなく（パラメータ行ではない）後ろに'['がある行全体
         "^[^=]*?\[" だと'['がErrorに食われてしまうので肯定先読み
         ".+?(?=])" も同様 ']'をSectionに含めない -->
    <Span begin="^[^=]*?(?=\[)" color="Error" >
      <RuleSet>
        <Span begin="\[" end="" color="Bracket" />
        <Span begin="]" end="" color="Bracket" />
        <Span begin=".+?(?=])" end="" color="Section" />
      </RuleSet>
    </Span>


    <!-- パラメータ行 -->
    <!-- キーなし（イコール始まり）はエラー -->
    <Span begin="^\s*=" color="Error" />
    <!-- イコールなしはエラー -->
    <Span begin="^(?!.*=).+$" color="Error" />

    <!-- キー名＆初めのイコール -->
    <!-- まず肯定先読みでイコールの前まで取り色付け
         以降をネストのSpanで処理する-->
    <Span begin="^[^\[]*?(?==)" color="Key">
      <RuleSet>
        <!-- イコールが先頭で来るのは確定なのでイコール1文字だけ取り色付け
             以降をネストのSpanで処理する-->
        <Span begin="=" color="Equal">
          <RuleSet>
            <Import ruleSet="TrueFalse" />
            <Import ruleSet="NumberLiteral" />
            <!-- boolでもnumberでもなければ黒に上書き -->
            <Rule foreground="Black">.</Rule>
          </RuleSet>
        </Span>
      </RuleSet>
    </Span>

  </RuleSet>


  <RuleSet name="TrueFalse" ignoreCase="true">
    <Keywords color="TrueFalse">
      <Word>true</Word>
      <Word>false</Word>
    </Keywords>
  </RuleSet>

  <RuleSet name="NumberLiteral">
    <Keywords color="NumberLiteral">
      <Word>NaN</Word>
    </Keywords>
    <Rule color="NumberLiteral">
      \b0[xX][0-9a-fA-F]+  # hex number
      |    \b
      (    \d+(\.[0-9]+)?   #number with optional floating point
      |    \.[0-9]+         #or just starting with floating point
      )
      ([eE][+-]?[0-9]+)? # optional exponent
    </Rule>
  </RuleSet>
</SyntaxDefinition>